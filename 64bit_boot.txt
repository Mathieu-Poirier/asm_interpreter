[BIOS]
  ↓
[Real Mode]
  → Load stage 2 loader
  → Switch to Protected Mode
  ↓
[Protected Mode]
  → Parse ELF
  → Load kernel segments
  → Setup page tables
  → Enable long mode
  ↓
[Long Mode]
  → Jump to kernel ELF entry (RIP)
  → Run 64-bit kernel

Full Boot Flow to 64-bit Kernel
✅ Stage 1: Real Mode (16-bit)

    Entry point from BIOS at 0x7C00.

    Enables A20 line (access above 1 MB).

    Loads the next stage from disk (stage 2 or full ELF loader).

    Copies it to higher memory (e.g., 0x9000:0000 or 0x10000).

    ✅ Switches to Protected Mode.

✅ Stage 2: Protected Mode (32-bit Flat Mode)

    Sets up a flat GDT (code/data segment bases = 0).

    Enables 32-bit protected mode (CR0.PE = 1).

    Sets up a stack.

    ✅ Parses the ELF kernel:

        Reads ELF headers and segments.

        Loads them to correct physical addresses.

        Extracts the entry point.

    ✅ Sets up PAE page tables (for 64-bit support).

    ✅ Loads CR3 with PML4 address.

    ✅ Sets EFER.LME MSR (Long Mode Enable).

    ✅ Enables paging (CR0.PG = 1).

    ✅ Far jump to 64-bit code segment.

✅ Stage 3: Long Mode (64-bit)

    RIP starts executing at the ELF kernel's entry point (e.g., 0xFFFFFFFF80000000).

    All addresses are now virtual, translated via paging.

    64-bit C or Rust kernel now takes over full system control.